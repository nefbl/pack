#!/usr/bin/env node

'use strict';

process.title = 'nefbl-builder';

const nodejs = require('@hai2007/nodejs');
const analyseBundle = require('./build/analyseBundle');
const fs = require('fs');
const urlToIndex = require('./build/urlToIndex');
const { minify } = require("terser");

// 首先，获取配置文件
let config = require('./config')(process);

// 需要分析的独立bundle文件
// 除了入口文件外，比如遇到 ()=>import() 这样的懒加载语句也会扩充下面的语句
let needAnalyseFiles = [{
    source: config.entry.file,
    target: config.output.file,

    // 标记是根bundle
    isRoot: true
}];

// 记录根bundle已经解析的依赖文件
global.__nefbl_pack__rootBundle__ = [];

// 记录已经生称的lazy包
global.__nefbl_pack__lazyBundle__ = [];

nodejs.error(`Crafted in China By hai2007, powered by @nefbl/pack.
-------------------------------------------------------------------------
( https://nefbl.github.io/pack/ )
`)

while (needAnalyseFiles.length > 0) {
    let needAnalyseFile = needAnalyseFiles.shift();

    // 记录当前bundle已经解析的依赖文件
    global.__nefbl_pack__currentBundle__ = [];

    // 记录当前解析的是否是根bundle
    global.__nefbl_pack__isRootBundle__ = needAnalyseFile.isRoot;

    let bundleCode = "";
    // 如果是根bundle，需要搭载基本的方法
    if (needAnalyseFile.isRoot) {
        bundleCode = fs.readFileSync(nodejs.fullPath('./build/static.js', __dirname), 'utf-8');
        bundleCode = "/******/\n" + bundleCode.replace(/^/mg, '/******/  ') + "\n/************************************************************************/\n/******/\n";
    }

    nodejs.log(`\nIndependent bundle file currently analyzed:
    ● ${needAnalyseFile.source} → ${needAnalyseFile.target}
`);

    // 分析出当前bundle文件
    let bundle = analyseBundle(needAnalyseFile.source, config);
    bundleCode += bundle.code;
    for (let lazyBundleFile of bundle.lazy) { needAnalyseFiles.push(lazyBundleFile); }

    if (needAnalyseFile.isRoot) {

        // 整个程序由主bundle启动
        bundleCode += `\nwindow.__nefbl_pack__bundleSrc__['${urlToIndex(needAnalyseFile.source)}']();`;
    }

    if (config.min) {
        minify(bundleCode, {
            toplevel: true
        }).then(data => {
            fs.writeFileSync(needAnalyseFile.target, data.code);
        });
    } else {
        fs.writeFileSync(needAnalyseFile.target, bundleCode);
    }

}

nodejs.error(`
Package succeeded!
`);
